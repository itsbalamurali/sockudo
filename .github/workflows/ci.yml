name: CI - Lint and Test

on:
  push:
    branches: [ main, master, develop, beta ]
  pull_request:
    branches: [ main, master, develop, beta ]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =============================================================================
  # Lint and Format Check
  # =============================================================================
  lint:
    name: Lint and Format
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # =============================================================================
  # Test Suite
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libpq-dev libmariadb-dev cmake mysql-client postgresql-client

      - name: Start test services with docker-compose
        run: |
          # Start all test services using the exact same configuration
          docker compose -f docker-compose.test.yml up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to be ready..."
          
          # Wait for Redis instances
          for i in {1..60}; do
            if docker exec $(docker ps -q -f "name=redis-test") redis-cli ping &> /dev/null; then
              echo "Redis test is ready!"
              break
            fi
            echo "Waiting for Redis test... ($i/60)"
            sleep 2
          done
          
          # Wait for Redis Cluster
          for i in {1..60}; do
            if docker exec $(docker ps -q -f "name=redis-cluster") redis-cli -p 7003 ping &> /dev/null; then
              echo "Redis cluster is ready!"
              break
            fi
            echo "Waiting for Redis cluster... ($i/60)"
            sleep 2
          done
          
          # Wait for NATS instances
          for i in {1..60}; do
            if curl -f http://localhost:18222/varz &> /dev/null; then
              echo "NATS-1 is ready!"
              break
            fi
            echo "Waiting for NATS-1... ($i/60)"
            sleep 2
          done
          
          for i in {1..60}; do
            if curl -f http://localhost:18223/varz &> /dev/null; then
              echo "NATS-2 is ready!"
              break
            fi
            echo "Waiting for NATS-2... ($i/60)"
            sleep 2
          done
          
          # Wait for MySQL test instance
          for i in {1..60}; do
            if mysql -h 127.0.0.1 -P 13306 -u root -proot123 -e "SELECT 1" &> /dev/null; then
              echo "MySQL test is ready!"
              break
            fi
            echo "Waiting for MySQL test... ($i/60)"
            sleep 2
          done

          # Wait for PostgreSQL test instance
          for i in {1..60}; do
            if PGPASSWORD=postgres123 psql -h 127.0.0.1 -p 15432 -U postgres -d sockudo_test -c "SELECT 1" &> /dev/null; then
              echo "PostgreSQL test is ready!"
              break
            fi
            echo "Waiting for PostgreSQL test... ($i/60)"
            sleep 2
          done

      - name: Show running services
        run: |
          echo "=== Running Docker containers ==="
          docker ps
          echo "=== Port bindings ==="
          docker port $(docker ps -q -f "name=redis-test") || true
          docker port $(docker ps -q -f "name=redis-cluster") || true
          docker port $(docker ps -q -f "name=nats-1") || true
          docker port $(docker ps -q -f "name=nats-2") || true
          docker port $(docker ps -q -f "name=mysql-test") || true
          docker port $(docker ps -q -f "name=postgres-test") || true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose --all-features
        env:
          # Redis configurations (matching docker-compose.test.yml)
          DATABASE_REDIS_HOST: localhost
          DATABASE_REDIS_PORT: 16379

          # Redis Cluster configuration (matching docker-compose.test.yml)
          REDIS_CLUSTER_NODES: localhost:7001,localhost:7002,localhost:7003

          # NATS configuration (matching docker-compose.test.yml)
          NATS_SERVERS: nats://localhost:14222,nats://localhost:14223

          # MySQL configurations (matching docker-compose.test.yml)
          DATABASE_MYSQL_HOST: localhost
          DATABASE_MYSQL_PORT: 13306
          DATABASE_MYSQL_USER: root
          DATABASE_MYSQL_PASSWORD: root123
          DATABASE_MYSQL_DATABASE: sockudo

          # PostgreSQL configurations (matching docker-compose.test.yml)
          DATABASE_POSTGRES_HOST: localhost
          DATABASE_POSTGRES_PORT: 15432
          DATABASE_POSTGRES_USER: postgres
          DATABASE_POSTGRES_PASSWORD: postgres123
          DATABASE_POSTGRES_DATABASE: sockudo_test

      - name: Cleanup test services
        if: always()
        run: |
          echo "Stopping test services..."
          docker compose -f docker-compose.test.yml down -v || true
          docker system prune -f || true

  # =============================================================================
  # Security Audit
  # =============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Security audit
        run: cargo audit

  # =============================================================================
  # Manual Build Instructions (PR only)
  # =============================================================================
  manual-build-info:
    name: 🔨 Manual Build Instructions
    runs-on: ubuntu-24.04
    needs: [lint, test, security]
    steps:
      - name: Post build instructions
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Starting manual build info job...');
            console.log('Event name:', context.eventName);
            
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/workflows/manual-build.yml`;
            let prNumber, branchName;
            
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              branchName = context.payload.pull_request.head.ref;
            } else if (context.eventName === 'push') {
              // For push events, try to find the associated PR
              branchName = context.ref.replace('refs/heads/', '');
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branchName}`,
                state: 'open'
              });
              if (prs.data.length > 0) {
                prNumber = prs.data[0].number;
              }
            }
            
            if (!prNumber) {
              console.log('No PR found for this push, skipping');
              return;
            }
            
            console.log('PR number:', prNumber);
            console.log('Branch name:', branchName);
            console.log('Run URL:', runUrl);
            
            // Check if we've already posted instructions
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            console.log(`Found ${comments.data.length} existing comments`);
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Manual Build Available')
            );
            
            console.log('Existing comment found:', !!existingComment);
            
            if (!existingComment) {
              const body = [
                '## 🔨 Manual Build Available',
                '',
                '**To build artifacts for this PR:**',
                '',
                `1. **Click here:** [🚀 Trigger Manual Build](${runUrl})`,
                '2. Click **"Run workflow"** (green button)',
                `3. Select branch: \`${branchName}\``,
                '4. Choose platforms to build:',
                '   - ☑️ Linux x64 (GNU)',
                '   - ☑️ macOS x64 (Intel)',
                '   - ☑️ macOS ARM64 (Apple Silicon)',
                '   - ☑️ Windows x64',
                '   - ☑️ Docker image',
                '5. Click **"Run workflow"**',
                '',
                '**Artifacts will be posted here when build completes** ⬇️',
                '',
                '---',
                '*This comment will be updated with download links once builds are triggered*'
              ].join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
              
              console.log('Posted manual build instructions to PR');
            } else {
              console.log('Manual build instructions already posted, skipping');
            }